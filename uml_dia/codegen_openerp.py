# PyDia Code Generation from UML Diagram
# Copyright (c) 2008  Fabien Pinckaers <fp@tinyerp.com>

import sys, dia, os
import zipfile
from codegen import ObjRenderer

class OpenERPRenderer(ObjRenderer) : 
	def __init__(self) :
		ObjRenderer.__init__(self)

	def data_get(self):
		return {
			'file': self.filename,
			'module': os.path.basename(self.filename).split('.')[-2]
		}

	def terp_get(self):
		terp = """{
		"name" : "%(module)s",
		"version" : "1.0",
		"author" : "Tiny",
		"website" : "http://openerp.com",
		"category" : "Unknown",
		"description": \"\"\"  \"\"\",
		"depends" : ['base'],
		"init_xml" : [ ],
		"demo_xml" : [ ],
		"update_xml" : ['%(module)s_view.xml'],
		"installable": True
}
		""" % self.data_get()
		return terp

	def init_get(self):
		return '#\n# Generated by the OpenERP plugin for Dia !\n#\n\nimport %(module)s' % self.data_get()

	def view_class_get(self, cn, cd):
		data = self.data_get()
		i = 1
		fields_form = fields_tree = ""
		for sa in cd.attributes.keys() :
			fields_form += "\t\t\t\t<field name=\"%s\" select=\"%d\"/>\n" % (sa,i)
			fields_tree += "\t\t\t\t<field name=\"%s\"/>\n" % (sa,)
			if (i==2) or not i:
				i=-1
			i += 1
		data['form']= fields_form
		data['tree']= fields_tree
		data['name']= cn
		data['name_id']= cn.replace('.','_')
		data['menu']= 'Unknown/'+cn.replace('.','_')
		result = """
	<record model="ir.ui.view" id="view_%(name_id)s_form">
		<field name="name">%(name)s.form</field>
		<field name="model">%(name)s</field>
		<field name="type">form</field>
		<field name="arch" type="xml">
			<form string="%(name)s">
%(form)s
			</form>
		</field>
	</record>
	<record model="ir.ui.view" id="view_%(name_id)s_tree">
		<field name="name">%(name)s.tree</field>
		<field name="model">%(name)s</field>
		<field name="type">tree</field>
		<field name="arch" type="xml">
			<tree string="%(name)s">
%(tree)s
			</tree>
		</field>
	</record>
	<record model="ir.actions.act_window" id="action_%(name_id)s_form">
		<field name="name">%(name)s</field>
		<field name="res_model">%(name)s</field>
		<field name="view_type">form</field>
		<field name="view_mode">tree,form,calendar</field>
	</record>
	<menuitem name="%(menu)s" id="menu_%(name_id)s" action="action_%(name_id)s"/>

		""" % data
		return result

	def view_get(self):
		result = """<?xml version="1.0"?>
<terp>
<data>
"""
		for sk in self.klasses.keys() :
			result += self.view_class_get(sk, self.klasses[sk])
		result += """
</terp>
</data>"""
		return result

	def code_get(self):
		result = """
##############################################################################
#
# Copyright (c) 2004 TINY SPRL. (http://tiny.be) All Rights Reserved.
#                    Fabien Pinckaers <fp@tiny.Be>
#
# WARNING: This program as such is intended to be used by professional
# programmers who take the whole responsability of assessing all potential
# consequences resulting from its eventual inadequacies and bugs
# End users who are looking for a ready-to-use solution with commercial
# garantees and support are strongly adviced to contract a Free Software
# Service Company
#
# This program is Free Software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
##############################################################################

from osv import osv, fields

"""
		for sk in self.klasses.keys() :
			cname = sk.replace('.','_')
			result += "class %s(osv.osv):\n" % (cname,)
			if self.klasses[sk].comment:
				result += '"""'+self.klasses[sk].comment+'"""\n'
			result += "\t_name = '%s'\n" % (sk,)


			parents = self.klasses[sk].parents
			if parents:
				result += "\t_inherit = '"+parents[0]+"'\n"
			templates = self.klasses[sk].templates
			if templates:
				result += "\t_inherits = {'"+templates[0]+"':'"+templates[0]+"'}\n"


			default = {}
			result += "\t_columns = {\n"
			for sa in self.klasses[sk].attributes.keys() :
				attr = self.klasses[sk].attributes[sa]
				if not attr:
					attr = ["char","'Unknown'"]
				value = attr[2]
				attr = attr[0]
				if (not value) or (value[0]<>"'"):
					value = "'"+str(value)+"'"
				result += "\t\t'%s': fields.%s(%s),\n" % (sa, attr, value)
			result += "\t}\n"

			if default:
				result += '\t_defaults = {'
				for d in default:
					result += "\t\t'%s':lambda *args: '%s'\n" % (d, default[d])
				result += '\t}'

			for so, op in self.klasses[sk].operations :
				pars = "self, cr, uid, ids"
				for p in op[2] :
					pars = pars + ", " + p[0]
				result+="\tdef %s (%s) :\n" % (so, pars)
				if op[4]: result+="\t\t\"\"\" %s \"\"\"\n" % op[4]
				result+="\t\t# returns %s\n" % (op[0], )
			result += cname+"()\n\n"
		return result

	def end_render(self) :
		module = self.data_get()['module']
		zip = zipfile.ZipFile(self.filename, 'w')
		filewrite = {
				'__init__.py':self.init_get(),
				'__terp__.py':self.terp_get(),
				module+'.py': self.code_get(),
				module+'_view.xml': self.view_get()
		}
		for name,datastr in filewrite.items():
			info = zipfile.ZipInfo(module+'/'+name)
			info.compress_type = zipfile.ZIP_DEFLATED
			info.external_attr = 2175008768
			zip.writestr(info, datastr)
		zip.close()
		ObjRenderer.end_render(self)


# dia-python keeps a reference to the renderer class and uses it on demand
dia.register_export ("PyDia Code Generation (OpenERP)", "zip", OpenERPRenderer())

