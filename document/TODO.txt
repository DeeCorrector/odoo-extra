Some Notes:

* Use cadaver, the command line DAV client, to test the DAV connection during
  developments
* Sometimes you have to kill manually the server:
  CTRL-Z
  kill -9 %1

To do, document module, in this order:


1. Make the system works on the same port then the current server. Just uses
   another URL. I think you must subcribe this like a service and don't run
   your own server. Check how the service directory works for dispatching
   requests.
   You may have to create a handler who routes to the right handler according
   to the url used: /document/... is for DAV, the others are for XML-RPC.
   It should be feasible has DAV is over HTTP like XML-RPX.
   Check if we can easily support DAV HTTPS if Tiny ERP is run a https. (I
   think it should work directly)
   I propose this as the root:
       /document/dbname/repository_name

2. Bugfix so that it works with ressources having name like "SO/0001"
   It should replace the name on the fly. Try browsing the list of
   Sales order in the demo data.

3. Bugfix so that it correctly indexes all documents, and you must be
   able to perform a search in the GTK interface through all documents.
   It seems to be an encoding problem, data should be encoded in uft8 in
   the database (or unicode ?)

4. Finnish the content printing so that you can select a report with a
   domain [('res_model','=',parent.model_id)]. It must uses this report
   for the printing on demand

5. Develop the possibility to store contents in directories or in postgresql.
   It must works with rm, when directories are moved. Don't store all files
   in the same dir, it's efficient. Create directories like the one you see
   through the DAV access. Use ID's:
   Example:
      Projects / Absences / Paid Absences
   Shoud become:
      123/123.456/123.789/321.pdf
   Where:
      123 is the ID of the Project directory
	  456, 789 are ID's of analytic accounts in the project hyerarchy (tree)
	  321 is the ID of the ir.attachment

6. Create a good documentation representing all features on the wiki.

7. Overwrite create and write of the ir.attachement object to:
   fill-in, according to the content (data field):
   * file_size,
   * properties,
   * indexed content.
   So that indexing (and others fields) will not only works from the DAV interface
   but also from attachement.

8. Add properties on document:
   Author, Version, Descritpion, Title
   We can search on properties.
   These properties are extracted from the document when parsing for indexing.

9. Check-In/Out. Add buttons on document and a state and a user field to check
   in/out. If a user checks out a document, the others users will not be able to
   modify (override) it. The state is then Being Used, Check In reset the state
   to Available.

   I think this should work through LDAP too, I saw check in/out options in 
   cadaver's command.

10. Implement DAV properties (version, ...)
